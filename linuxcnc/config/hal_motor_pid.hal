# LinuxCNC HAL configuration for motor PID controllers.

# Module loading
loadrt pid num_chan=3
loadrt runawayprot count=3
loadrt logic names=logic.or3 personality=0x203
loadrt offset count=1
loadrt limit3 count=1
loadrt limit2 count=1
loadrt zmap count=1

addf offset.0.update-feedback              servo-thread 1
addf zmap.0                                servo-thread
addf offset.0.update-output                servo-thread

addf pid.0.do-pid-calcs                    servo-thread
addf pid.1.do-pid-calcs                    servo-thread
addf pid.2.do-pid-calcs                    servo-thread

addf runawayprot.0                         servo-thread
addf runawayprot.1                         servo-thread
addf runawayprot.2                         servo-thread
addf logic.or3                             servo-thread

addf mux2.3                                servo-thread
addf mux2.4                                servo-thread
addf sum2.3                                servo-thread
addf limit3.0                              servo-thread
addf limit2.0                              servo-thread

#########################
# Calibrated kinematics #
#########################

setp matrixkins.c0 [MATRIXKINS]C0
setp matrixkins.c1 [MATRIXKINS]C1
setp matrixkins.c2 [MATRIXKINS]C2
setp matrixkins.c3 [MATRIXKINS]C3
setp matrixkins.c4 [MATRIXKINS]C4
setp matrixkins.c5 [MATRIXKINS]C5
setp matrixkins.c6 [MATRIXKINS]C6
setp matrixkins.c7 [MATRIXKINS]C7
setp matrixkins.c8 [MATRIXKINS]C8

####################
# X axis / joint 0 #
####################

# Enable signal for the motor driver
newsig motordrive.0.enable bit
sets motordrive.0.enable FALSE
net motordrive.0.enable => pid.0.enable
net motordrive.0.enable <= joint.0.amp-enable-out 

# Feedback signal from encoder
newsig motordrive.0.feedback float
net motordrive.0.feedback => pid.0.feedback        # Feedback to PID control
net motordrive.0.feedback => joint.0.motor-pos-fb  # Feedback to GUI

# PWM output drive signal
newsig motordrive.0.control float
net motordrive.0.control <= pid.0.output

# Commanded position from motion controller
net motordrive.0.command joint.0.motor-pos-cmd => pid.0.command

# PID parameters from ini file
setp pid.0.Pgain [JOINT_0]P
setp pid.0.Igain [JOINT_0]I
setp pid.0.Dgain [JOINT_0]D
setp pid.0.bias [JOINT_0]BIAS
setp pid.0.FF0 [JOINT_0]FF0
setp pid.0.FF1 [JOINT_0]FF1
setp pid.0.FF2 [JOINT_0]FF2
setp pid.0.deadband [JOINT_0]DEADBAND
setp pid.0.maxoutput [JOINT_0]MAX_OUTPUT

# Monitoring PID feedback loop
setp runawayprot.0.control-threshold 12.0
setp runawayprot.0.feedback-threshold 0.01
setp runawayprot.0.time-threshold 0.2
net motordrive.0.feedback => runawayprot.0.feedback
net motordrive.0.control => runawayprot.0.control
net motordrive.0.runaway runawayprot.0.out => logic.or3.in-00

####################
# Y axis / joint 1 #
####################

# Enable signal for the motor driver
newsig motordrive.1.enable bit
sets motordrive.1.enable FALSE
net motordrive.1.enable => pid.1.enable
net motordrive.1.enable <= joint.1.amp-enable-out 

# Feedback signal from encoder
newsig motordrive.1.feedback float
net motordrive.1.feedback => pid.1.feedback        # Feedback to PID control
net motordrive.1.feedback => joint.1.motor-pos-fb  # Feedback to GUI

# PWM output drive signal
newsig motordrive.1.control float
net motordrive.1.control <= pid.1.output

# Commanded position from motion controller
net motordrive.1.command joint.1.motor-pos-cmd => pid.1.command

# PID parameters from ini file
setp pid.1.Pgain [JOINT_1]P
setp pid.1.Igain [JOINT_1]I
setp pid.1.Dgain [JOINT_1]D
setp pid.1.bias [JOINT_1]BIAS
setp pid.1.FF0 [JOINT_1]FF0
setp pid.1.FF1 [JOINT_1]FF1
setp pid.1.FF2 [JOINT_1]FF2
setp pid.1.deadband [JOINT_1]DEADBAND
setp pid.1.maxoutput [JOINT_1]MAX_OUTPUT

# Monitoring PID feedback loop
setp runawayprot.1.control-threshold 12.0
setp runawayprot.1.feedback-threshold 0.01
setp runawayprot.1.time-threshold 0.2
net motordrive.1.feedback => runawayprot.1.feedback
net motordrive.1.control => runawayprot.1.control
net motordrive.1.runaway runawayprot.1.out => logic.or3.in-01

####################
# Z axis / joint 2 #
####################

# Enable signal for the motor driver
newsig motordrive.2.enable bit
sets motordrive.2.enable FALSE
net motordrive.2.enable => pid.2.enable
net motordrive.2.enable <= joint.2.amp-enable-out 

# Feedback signal from encoder
newsig motordrive.2.feedback float
net motordrive.2.feedback => pid.2.feedback        # Feedback to PID control
net motordrive.2.feedback => offset.0.fb-in  # Feedback to GUI
net motordrive.2.offset_fb offset.0.fb-out => joint.2.motor-pos-fb

# PWM output drive signal
newsig motordrive.2.control float
net motordrive.2.control <= pid.2.output

# Commanded position from motion controller
net motordrive.2.offset_cmd joint.2.motor-pos-cmd => offset.0.in
net motordrive.2.command offset.0.out => pid.2.command

# PID parameters from ini file
setp pid.2.Pgain [JOINT_2]P
setp pid.2.Igain [JOINT_2]I
setp pid.2.Dgain [JOINT_2]D
setp pid.2.bias [JOINT_2]BIAS
setp pid.2.FF0 [JOINT_2]FF0
setp pid.2.FF1 [JOINT_2]FF1
setp pid.2.FF2 [JOINT_2]FF2
setp pid.2.deadband [JOINT_2]DEADBAND
setp pid.2.maxoutput [JOINT_2]MAX_OUTPUT

# Monitoring PID feedback loop
setp runawayprot.2.control-threshold 20.0
setp runawayprot.2.feedback-threshold 0.01
setp runawayprot.2.time-threshold 0.2
net motordrive.2.feedback => runawayprot.2.feedback
net motordrive.2.control => runawayprot.2.control
net motordrive.2.runaway runawayprot.2.out => logic.or3.in-02

# Combined OR of all fault signals
net motordrive.fault <= logic.or3.or

#################
# Z axis offset #
#################

setp zmap.0.reset 1

net machine.pos_x axis.x.pos-cmd => zmap.0.x
net machine.pos_y axis.y.pos-cmd => zmap.0.y
net machine.rel_z => zmap.0.probe-z
net powerctl.probe_sensor => zmap.0.probe

# Select either zmap or +100mm offset for Z axis.
# This can be used for e.g. tool changing or for dry run
net powerctl.lift_z => mux2.3.sel
net powerctl.zmap zmap.0.z => mux2.3.in0
setp mux2.3.in1 100

# Calculate maximum offset to not exceed Z axis maximum
net motordrive.2.cmd_abs axis.z.pos-cmd => sum2.3.in0
setp sum2.3.gain0 -1.0
setp sum2.3.offset [AXIS_Z]MAX_LIMIT

# Limit velocity and maximum value
setp limit3.0.maxv 10
setp limit3.0.maxa 50
setp limit3.0.smooth-steps 100
net motordrive.2.offset-req2 mux2.4.out => limit3.0.in
net motordrive.2.offset-limv limit3.0.out => limit2.0.in
net motordrive.2.max-offset sum2.3.out => limit2.0.max
net motordrive.2.offset limit2.0.out => offset.0.offset

# Don't move when door is open
net motordrive.2.offset-limv => mux2.4.in0
net motordrive.2.offset-req mux2.3.out => mux2.4.in1
net powerctl.allow_auto => mux2.4.sel
