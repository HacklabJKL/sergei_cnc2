component matrixkins "Calibrated kinematics for 3-axis machines";

description
"""
The matrixkins component implements custom kinematics for 3-axis
Cartesian machines that allows compensating minor alignment inaccuracies
in software.

\\fBKINEMATICS MODEL:\\fR

By default identity matrix is used, which is equal to trivial kinematics:

| X_joint |   | 1 0 0 |   | X_axis |
| Y_joint | = | 0 1 0 | * | Y_axis |
| Z_joint |   | 0 0 1 |   | Z_axis |

Adjusting the calibration matrix allows compensating out many
mechanical issues, including:

* Scale error of each axis.
* Perpendicularity between each pair of axes.
* Parallelism between spindle rotational axis and Z movement.
* Perpendicularity between spindle rotational axis and X/Y movement. 

The matrix coefficients are set by parameters c0..c8.
For 3 axis machine, the equations become:

X_joint = c0 * X_axis + c1 * Y_axis + c2 * Z_axis
Y_joint = c3 * X_axis + c4 * Y_axis + c5 * Z_axis
Z_joint = c6 * X_axis + c7 * Y_axis + c8 * Z_axis

If the machine has more than 3 axes, the rest are passed through
without adjustment.

\\fBCALIBRATION INSTRUCTIONS:\\fR

For a 3 axis milling machine, the following process can be used to accurately
measure and compensate the mechanical alignment.

Tools required:

  1. Dial indicator that can be mounted on spindle.
  2. Straight rod that can be mounted on spindle.
  3. Calipers.

Process:

\\fB1. Head tramming\\fR

Mechanically tram the spindle to the table as well as you can.
The perpendicularity of spindle vs. table cannot be compensated in software,
and the spindle axis will act as the reference for all further steps.

You can measure the perpendicularity by mounting the dial indicator on
the spindle. Search for "mill tramming" online for detailed process.

\\fB2. X and Y axis squaring\\fR
Cut octagon out of some rigid material. It is best to cut a roughing path
first and a thin finishing pass last, to get the best accuracy. Make the
octagon as large as your calipers can measure. Before unmounting the
workpiece, mark the X and Y directions on it.

Measure width along X and Y axes. If your axis scales are set correctly,
they should be identical. If they are not, you can adjust c[0] and c[4] to
compensate. Note that endmill diameter will affect the actual dimensions
of the test octagon, but not the ratio between sides.

Measure width along both diagonals.
If the X and Y axes are square to each other, the readings should be identical.

To compensate, set
c[1] = (B^2 - A^2) / (2 * A * B)
where A is the diagonal in X+/Y+ direction and B is the diagonal in X+/Y- direction.

This adjusts Y axis direction while keeping X axis as it was.
Alternatively you can set c[3] to adjust X axis instead.
This affects alignment with respect to e.g. table slots.

\\fB3. X axis squaring to spindle\\fR
Mount the dial indicator so that it rotates around the spindle axis, like in tramming measurement.
Mark a spot on the table where the indicator touches when it is in positive X direction from spindle center.
Zero the dial indicator.

Rotate dial indicator 180 degrees around the spindle.
Move X axis in positive direction until the indicator touches the same spot.
Ideally indicator reads 0 again.

To compensate, set
c[6] = D / X
where D is the new dial indicator reading, and X is the length moved along X axis.

\\fB4. Y axis squaring to spindle\\fR
Same as step 3, except move the machine in positive Y direction.

To compensate, set
c[7] = D / Y
where D is the new dial indicator reading, and Y is the length moved.

\\fB5. Z axis parallelism to spindle in X direction\\fR
Mount straight rod to the spindle.
Position dial indicator so that it measures horizontally against the positive X side of the rod, close to the spindle.

Spin the spindle by hand to see if there is any runout.
Zero the dial indicator at the midway position.

Raise Z axis until dial indicator measures close to the bottom end of the rod.
Spin the spindle by hand and take note of the midway value.

Set
c[2] = - X / Z
where X is the dial indicator movement and Z is the amount you raised the Z axis.

\\fB6. Z axis parallelism to spindle in Y direction\\fR
Same as step 5, except measure on the positive Y side of the rod.

Set
c[5] = - Y / Z
where Z is the dial indicator movement and Z is the amount you raised the Z axis.

\\fBINSTALLATION:\\fR

Build and install the component using halcompile:
$ [sudo] halcompile --install matrixkins.comp

Specify matrixkins in an ini file as:
\\fB[KINS]\\fR
\\fBKINEMATICS=matrixkins\\fR

""";
pin out bit dummy=1; // halcompile requires at least one pin
license "GPL";
;;

static struct haldata {
    hal_bit_t *enable;
    hal_float_t *c[9];
} *haldata;

static int userkins_setup(void) {
    int res=0;
    int comp_id;
    // this name must be different than the comp name:
    comp_id = hal_init("matrixkinsdata");
    if (comp_id < 0) goto error;
    haldata = hal_malloc(sizeof(struct haldata));
    if (!haldata) goto error;

    for (int i = 0; i < 9; i++)
    {
        res += hal_pin_float_newf(HAL_IN, &(haldata->c[i]), comp_id,"matrixkins.c%d", i);
        *haldata->c[i] = 0.0;
    }

	res += hal_pin_bit_new("matrixkins.enable", HAL_IN, &(haldata->enable), comp_id);

    *haldata->c[0] = *haldata->c[4] = *haldata->c[8] = 1.0;

    if (res) goto error;
    hal_ready(comp_id);
    rtapi_print("*** %s setup ok\n",__FILE__);
    return 0;
error:
    rtapi_print("\n!!! %s setup failed res=%d\n\n",__FILE__,res);
    return -1;
}

#include "kinematics.h"
#include "emcmotcfg.h"
EXPORT_SYMBOL(kinematicsType);
EXPORT_SYMBOL(kinematicsInverse);
EXPORT_SYMBOL(kinematicsForward);

KINEMATICS_TYPE kinematicsType()
{
static bool is_setup=0;
    if (!is_setup) userkins_setup();
    return KINEMATICS_BOTH;
}

int kinematicsForward(const double *j,
                      EmcPose * pos,
                      const KINEMATICS_FORWARD_FLAGS * fflags,
                      KINEMATICS_INVERSE_FLAGS * iflags)
{
    // For forward kinematics (joint to axis position) we
    // need the inverse of the 3x3 matrix.
    //
    // Refer to e.g.
    // https://ardoris.wordpress.com/2008/07/18/general-formula-for-the-inverse-of-a-3x3-matrix/
    // https://en.wikipedia.org/wiki/Invertible_matrix#Inversion_of_3_%C3%97_3_matrices

	double a = 1;
	double b = 0;
	double c = 0;
	double d = 0;
	double e = 1;
	double f = 0;
	double g = 0;
	double h = 0;
	double i = 1;
    
	if (*haldata->enable)
	{
		a = *haldata->c[0];
		b = *haldata->c[1];
		c = *haldata->c[2];
		d = *haldata->c[3];
		e = *haldata->c[4];
		f = *haldata->c[5];
		g = *haldata->c[6];
		h = *haldata->c[7];
		i = *haldata->c[8];
	}

    double det = a * (e * i - f * h)
               - b * (d * i - f * g)
               + c * (d * h - e * g);
    double invdet = 1.0 / det;

    // Apply inverse matrix transform to the 3 cartesian coordinates
    pos->tran.x = invdet * ( (e * i - f * h) * j[0]
                            +(c * h - b * i) * j[1]
                            +(b * f - c * e) * j[2]);
    
    pos->tran.y = invdet * ( (f * g - d * i) * j[0]
                            +(a * i - c * g) * j[1]
                            +(c * d - a * f) * j[2]);
    
    pos->tran.z = invdet * ( (d * h - e * g) * j[0]
                            +(b * g - a * h) * j[1]
                            +(a * e - b * d) * j[2]);

    // Pass rest of axes as identity
    if (EMCMOT_MAX_JOINTS > 3) pos->a = j[3];
    if (EMCMOT_MAX_JOINTS > 4) pos->b = j[4];
    if (EMCMOT_MAX_JOINTS > 5) pos->c = j[5];
    if (EMCMOT_MAX_JOINTS > 6) pos->u = j[6];
    if (EMCMOT_MAX_JOINTS > 7) pos->v = j[7];
    if (EMCMOT_MAX_JOINTS > 8) pos->w = j[8];

    return 0;
}

int kinematicsInverse(const EmcPose * pos,
                      double *j,
                      const KINEMATICS_INVERSE_FLAGS * iflags,
                      KINEMATICS_FORWARD_FLAGS * fflags)
{
	double a = 1;
	double b = 0;
	double c = 0;
	double d = 0;
	double e = 1;
	double f = 0;
	double g = 0;
	double h = 0;
	double i = 1;

	if (*haldata->enable)
	{
		a = *haldata->c[0];
		b = *haldata->c[1];
		c = *haldata->c[2];
		d = *haldata->c[3];
		e = *haldata->c[4];
		f = *haldata->c[5];
		g = *haldata->c[6];
		h = *haldata->c[7];
		i = *haldata->c[8];
	}

    // Apply matrix transform to the 3 cartesian coordinates
    j[0] = pos->tran.x * a + pos->tran.y * b + pos->tran.z * c;
    j[1] = pos->tran.x * d + pos->tran.y * e + pos->tran.z * f;
    j[2] = pos->tran.x * g + pos->tran.y * h + pos->tran.z * i;
    
    // Pass rest of axes as identity
    if (EMCMOT_MAX_JOINTS > 3) j[3] = pos->a;
    if (EMCMOT_MAX_JOINTS > 4) j[4] = pos->b;
    if (EMCMOT_MAX_JOINTS > 5) j[5] = pos->c;
    if (EMCMOT_MAX_JOINTS > 6) j[6] = pos->u;
    if (EMCMOT_MAX_JOINTS > 7) j[7] = pos->v;
    if (EMCMOT_MAX_JOINTS > 8) j[8] = pos->w;

    return 0;
}
